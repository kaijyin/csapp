# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 


# Sample linked list
     .align 8
ele1:
     .quad 0x00a
     .quad ele2
ele2:
     .quad 0x0b0
     .quad ele3
ele3:
     .quad 0xc00
     .quad 0

main:	
    irmovq ele1,%rdi
	call rsum_list		# rsum_list(ele1)
	ret

# long rsum_list(list_ptr ls)
# list_ptr in %rdi
rsum_list:
    pushq %rbx	
	xorq %rax,%rax	     # sum = 0
	andq %rdi,%rdi	     # Set CC
	je  finish           # at the end
    mrmovq (%rdi),%rbx   # Get ls->val
    mrmovq 8(%rdi),%rdi  # move to next
    call rsum_list
    addq %rbx,%rax       # Add to sum
finish:
    popq  %rbx
    ret	   # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
