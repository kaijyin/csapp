shlab
让我们实现shell的基本功能,包括运行程序(fork+exec)和回收子进程,还有对子进程的控制
按照writeup的提示走即可,

1.按照书上的提示,eval和信号处理需要block信号,避免对jobs数据结构的访问race
为什么屏蔽信号就能避免race?信号不是不可预测的嘛?
答案是,信号的处理会中断原本的程序进行,原本的程序->信号处理程序->原本的程序,
所以当原程序进入block的临界区时,不会收到任何信号,所以是数据安全的.

2.信号可以中断信号,所以信号处理函数中对jobs数据结构访问时也需要block其余的信号.
3.注意ctrl+c和ctrl+z以及kill等信号都应该按组发送,即把该进程组中的所有进程都关闭或者暂停,这样逻辑上才是对的.
要实现这个功能,首先需要把fork出的进程放到shell不同的进程组中,即setpid(0,0),
然后shell的信号handler中再向进程组(-pid)转发终端发出的信号.
4.为了实现简单,ctrl+z与ctrl+c的控制,都统一延迟到子进程发出的sig_child中通过设置waitpid的参数来解决.
